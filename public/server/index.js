"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = require("../log");
const option_1 = require("../utils/option");
const objects_1 = require("../utils/objects");
const ip = require("ip");
const config = require("config");
const error = require("errorhandler");
const moment = require("moment");
const cors = require("cors");
const helmet = require("helmet");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const DEFAULT_PORT = '3000';
exports.DEFAULT_PORT = DEFAULT_PORT;
const DEFAULT_ENV = 'development';
exports.DEFAULT_ENV = DEFAULT_ENV;
process.env.NODE_ENV = process.env.NODE_ENV || DEFAULT_ENV;
process.env.PORT = process.env.PORT || DEFAULT_PORT;
const _unknown = {
    name: 'unknown'
};
const _env = {
    profile: process.env.NODE_ENV,
    user: process.env.USER,
    lang: process.env.LANG,
    port: process.env.PORT,
    ip: ip.address(),
};
const _config = config.has('server') ? config.get('server') : _unknown;
const listen = server => {
    const instance = server.listen(process.env.PORT, () => log_1.default.info(`Server listen on ${ip.address()}:${process.env.PORT} start up at ${moment().toISOString()}`));
    return objects_1.merge(server, { instance: instance });
};
const mixinEnv = server => objects_1.merge(server, { env: _env });
const mixinInfo = server => objects_1.merge(server, { info: _config });
const start = server => {
    server = mixinEnv(mixinInfo(listen(server)));
    log_1.default.silly(`Server: ${objects_1.inspect(server)}`);
    log_1.default.debug(`Server env: ${objects_1.inspect(server.env)}`);
    return server;
};
exports.default = httpServer => option_1.default(httpServer)
    .map(server => start(server))
    .map(server => server.use(error()))
    .map(server => server.use(cors()))
    .map(server => server.use(helmet()))
    .map(server => server.use(cookieParser()))
    .map(server => server.use(log_1.default.morgan()))
    .map(server => server.use(bodyParser.json()))
    .map(server => server.use(bodyParser.urlencoded({
    extended: true
})));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBwL3NlcnZlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdDQUEyQjtBQUMzQiw0Q0FBb0M7QUFDcEMsOENBQWlEO0FBRWpELHlCQUF3QjtBQUN4QixpQ0FBZ0M7QUFDaEMsc0NBQXFDO0FBQ3JDLGlDQUFnQztBQUVoQyw2QkFBNEI7QUFDNUIsaUNBQWdDO0FBQ2hDLDBDQUF5QztBQUN6Qyw4Q0FBNkM7QUFFN0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFBO0FBeUNsQixvQ0FBWTtBQXhDckIsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFBO0FBd0NWLGtDQUFXO0FBdENsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUE7QUFDMUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksWUFBWSxDQUFBO0FBRW5ELE1BQU0sUUFBUSxHQUFHO0lBQ2IsSUFBSSxFQUFFLFNBQVM7Q0FDbEIsQ0FBQTtBQUVELE1BQU0sSUFBSSxHQUFHO0lBQ1QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUTtJQUM3QixJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJO0lBQ3RCLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUk7SUFDdEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTtJQUN0QixFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtDQUNuQixDQUFBO0FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFDLENBQUMsUUFBUSxDQUFBO0FBRXJFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxFQUFFO0lBQ3BCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQzNDLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxJQUFJLENBQ2Isb0JBQW9CLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZ0JBQWdCLE1BQU0sRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRXRHLE1BQU0sQ0FBQyxlQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDaEQsQ0FBQyxDQUFBO0FBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7QUFFdkQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7QUFFNUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEVBQUU7SUFDbkIsTUFBTSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUU1QyxhQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDMUMsYUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLGlCQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVsRCxNQUFNLENBQUMsTUFBTSxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUlELGtCQUFlLFVBQVUsQ0FBQyxFQUFFLENBQUMsZ0JBQU0sQ0FBQyxVQUFVLENBQUM7S0FDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzVCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNsQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDakMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQ25DLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztLQUN6QyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDNUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO0lBQzVDLFFBQVEsRUFBRSxJQUFJO0NBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUEifQ==