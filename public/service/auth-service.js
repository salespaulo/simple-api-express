"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const couchdb_1 = require("../db/couchdb");
const crypt = require("../utils/crypt");
const jwt = require("../utils/jwt");
const user_1 = require("../model/user");
const errors_1 = require("../utils/errors");
const getDomain = email => email.substring(email.lastIndexOf('@') + 1);
const getUsername = email => email.substring(1, email.lastIndexOf('@'));
const findById = (id) => new Promise((resolve, reject) => {
    if (!id) {
        return reject(errors_1.newRequiredParameters(`id="${id}"`));
    }
    const users = couchdb_1.default('users');
    return users.find({
        selector: {
            _id: {
                $eq: id
            }
        }
    }, (err, body, header) => {
        if (err)
            reject(err);
        else {
            const docs = body.docs;
            if (docs.length > 0)
                resolve(docs[0]);
            else
                reject(errors_1.newNotFound('User', 'email', id));
        }
    });
});
exports.findById = findById;
const newUser = (name, email, password, photoUrl = null, providerId = null) => new Promise((resolve, reject) => {
    if (!name || !email || !password) {
        return reject(this.newRequiredParametersError(`name=${name} email=${email} password=${password}`));
    }
    const toInsert = new user_1.User();
    toInsert._id = email;
    toInsert.name = name || getUsername(email);
    toInsert.password = crypt.encode(password);
    toInsert.providerId = providerId || 'simple-api';
    toInsert.photoUrl = photoUrl || 'http://www.gravatar.com/avatar/?d=mysteryman&s=50';
    toInsert.session = new user_1.Session();
    delete toInsert._rev;
    const users = couchdb_1.default('users');
    users.insert(toInsert, (err, inserted) => {
        if (err)
            reject(err);
        else {
            findById(inserted.id)
                .then(user => resolve(user))
                .catch(err => reject(err));
        }
    });
});
exports.newUser = newUser;
const forgotPassword = (email) => new Promise((resolve, reject) => {
});
exports.forgotPassword = forgotPassword;
const verifyToken = token => jwt.verify(token);
exports.verifyToken = verifyToken;
const login = (username, password) => new Promise((resolve, reject) => {
    const users = couchdb_1.default('users');
    findById(username)
        .then(user => {
        if (crypt.compare(password, user.password)) {
            jwt.sign({
                id: user._id,
                name: user.name,
                session: user.session
            })
                .then(token => {
                user.session.logged = true;
                user.session.token = token;
                users.insert({ _id: user._id, _rev: user._rev, session: user.session }, (err, updated) => {
                    if (err)
                        reject(err);
                    else
                        resolve(user);
                });
            });
        }
        else
            reject(errors_1.newInvalidParameters(`username=${username} with this password`));
    })
        .catch(err => reject(err));
});
exports.login = login;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC9zZXJ2aWNlL2F1dGgtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJDQUFtQztBQUNuQyx3Q0FBdUM7QUFDdkMsb0NBQW1DO0FBRW5DLHdDQUE2QztBQUM3Qyw0Q0FBMEY7QUFFMUYsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFdEUsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFdkUsTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFVLEVBQWlCLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM1RSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsTUFBTSxDQUFDLDhCQUFxQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3RELENBQUM7SUFFRCxNQUFNLEtBQUssR0FBRyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ2QsUUFBUSxFQUFFO1lBQ04sR0FBRyxFQUFFO2dCQUNELEdBQUcsRUFBRSxFQUFFO2FBQ1Y7U0FDSjtLQUNKLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNwQixJQUFJLENB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